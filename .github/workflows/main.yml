name: Versionamento

on:
  push:
    branches:
      - master

jobs:
  version:
    runs-on: ubuntu-latest

    steps:
      - name: Checar repositório
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Realizar git pull para garantir que o branch está atualizado
        run: |
          git pull origin master

      - name: Configurar Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14"

      - name: Instalar dependências
        run: npm install

      - name: Instalar semver
        run: npm install -g semver

      - name: Criar nova tag caso não exista
        id: create_initial_tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ -z "$(git tag)" ]; then
            git config --global user.name 'github-actions'
            git config --global user.email 'github-actions@github.com'
            git tag -a v0.0.0 -m "Initial release"
            git push origin v0.0.0
          fi

      - name: Calcular nova versão
        id: version
        run: |
          git fetch --tags
          LAST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          if [ -z "$LAST_TAG" ]; then
            LAST_TAG="v0.0.0"
          fi
          echo "Versão Atual: $LAST_TAG"

          if [ "$LAST_TAG" = "v0.0.0" ]; then
            COMMITS=$(git log --pretty=format:"%s")
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s")
          fi

          echo "Commits desde a última tag:"
          echo "$COMMITS"

          MAJOR=0
          MINOR=0
          PATCH=0

          for COMMIT in "$COMMITS"; do
            if [[ "$COMMIT" == *"BREAKING CHANGE"* ]]; then
              MAJOR=1
            elif [[ "$COMMIT" == *"feat"* ]]; then
              MINOR=1
            elif [[ "$COMMIT" == *"fix"* ]]; then
              PATCH=1
            fi
          done

          CURRENT_VERSION=${LAST_TAG#v}
          NEW_VERSION=$CURRENT_VERSION
          if [[ $MAJOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i major $CURRENT_VERSION)
          elif [[ $MINOR -eq 1 ]]; then
            NEW_VERSION=$(semver -i minor $CURRENT_VERSION)
          elif [[ $PATCH -eq 1 ]]; then
            NEW_VERSION=$(semver -i patch $CURRENT_VERSION)
          fi

          echo "Nova versão: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_ENV

      - name: Garantir versão padrão
        run: |
          if [ -z "${{ env.new_version }}" ]; then
            echo "Nenhuma nova versão detectada. Usando v0.0.1 como padrão."
            echo "new_version=0.0.1" >> $GITHUB_ENV
          fi

      - name: Atualizar versão no package.json
        run: |
          # Forçar o comando npm version para registrar uma mudança
          npm version ${{ env.new_version }} --no-git-tag-version --allow-same-version

          # Se o npm não fez nenhuma alteração, então faça o git commit mesmo assim
          git add package.json
          git commit -m "chore(release): version ${{ env.new_version }}" || echo "Nenhuma alteração a ser comitada"

      - name: Commit e push
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@github.com'
          git push origin master --tags

      - name: Efetuar login no docker hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Criar imagem docker
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/testedockerhub:${{ env.new_version }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/testedockerhub:${{ env.new_version }} ${{ secrets.DOCKERHUB_USERNAME }}/testedockerhub:latest

      - name: Efetuar push da imagem
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/testedockerhub:${{ env.new_version }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/testedockerhub:latest
